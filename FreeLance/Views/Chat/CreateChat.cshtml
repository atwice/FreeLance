@model FreeLance.Controllers.ChatController.ChatVR

@{ string chatId = Model.ChatId.ToString(); };

<div class="chat body">
	<div class="row">
		<div class="col-md-12">
			<input type="hidden" id="lastCommentTime" value="0" />
			<div id="chat"></div>
		</div>
	</div>
	<div class='chat-message-container row'>
		<div class='chat-message-left'>
			<img src='~/Content/avatars/default.png' />
			<i class='glyphicon glyphicon-star chat-star'></i>
		</div>
		<div class='chat-message-right'>

			<div class='chat-name'>@Model.UserName</div>
			<div class="col-md-12">
				<textarea class="form-control" id='messageText' rows="3"></textarea>
			</div>
			<div class="col-md-12">
				<button id='sendMessage' class='btn btn-primary pull-right'>Send</button>
			</div>
			
		</div>
	</div>
	<div class="row">
		<div class="col-md-12">
			
		</div>
	</div>
</div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jquery-comments/js")
@Styles.Render("~/bundles/jquery-comments/css")

@Scripts.Render("~/bundles/chat/js")
@Styles.Render("~/bundles/chat/css")


@Scripts.Render("~/bundles/jquery-signalR")
<script src="~/signalr/hubs"></script>


<script type="text/javascript">
	var CHAT_ID = @Model.ChatId;

	function showChatMessage(data) {
		$( "#chat" ).chat().addMessage({
			name: data.Author,
			text: data.Comment,
			photoUrl: data.UserAvatar,
			isStarred: data.CreatedByCurrentUser
		});
	}

	function chatAddText(text, isError) {
		var chat = $( "#chat" ).chat();
		var textObject = {};
		textObject.text = text;
		textObject.style = isError ? "error" : "default";
		chat.addText( textObject );
	};
	$(function () {
		// Declare a proxy to reference the hub.
		var chat = $.connection.chatHub;

		// Create a function that the hub can call to broadcast messages.
		chat.client.hubMessage = function (string) {
			chatAddText(string, false);
		};
		chat.client.newMessages = function (result) {
			if (result.Status == 'Ok') {
				for (var i = 0; i < result.Result.length; i++) {
					showChatMessage(result.Result[i]);
				}
			} else {
				chatAddText(result.Reason, true);
			}
		};
		chat.client.errorSendMessage = function (result) {
			chatAddText(result.Reason, true);
		};
		$.connection.hub.start().done(function () {
			chat.server.joinChat(CHAT_ID);
			$("#sendMessage").click( function() {
				text = $( "#messageText" ).val();
				chat.server.sendMessage(CHAT_ID, null, text);
			});
		}).fail(function (error) {
			console.log('Invocation of start failed. Error: ' + error)
		});
		//$.connection.hub.stop(function () {
		//	chat.server.leaveChat(CHAT_ID);
		//});
	});
</script>